<?php

namespace Gems\HL7\Segment;

use PHPUnit_Framework_TestCase;
use Zalt\Loader\ProjectOverloader;
use const TEST_DIR;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-12 at 12:28:21.
 */
class EVNSegmentTest extends PHPUnit_Framework_TestCase {

    /**
     * @var EVNSegment
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $loader = new ProjectOverloader([
            'Gems\\Clover',
            'Gems',
            'PharmaIntelligence',
        ]);
        $loader->createServiceManager();

        $unserializer = $loader->create('HL7\\Unserializer');        
        $file         = TEST_DIR . '/resources/orm.txt';
        $testHl7      = file_get_contents($file);
        
        $map          = array(
            'MSH' => 'Gems\HL7\Segment\MSHSegment',
            'EVN' => 'Gems\HL7\Segment\EVNSegment'
        );
        $message      = $unserializer->loadMessageFromString($testHl7, $map);
        $evns         = $message->getSegmentsByName('EVN');
        $this->object = $evns[0];
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    /**
     * @covers Gems\HL7\Segment\EVNSegment::getEventTypeCode
     */
    public function testGetEventTypeCode() {
        $this->assertEquals('A08', $this->object->getEventTypeCode());
    }

    /**
     * @covers Gems\HL7\Segment\EVNSegment::getRecordedDateTimestamp
     */
    public function testGetRecordedDateTimestamp() {
        $this->assertEquals('20170103075310', $this->object->getRecordedDateTimestamp()->getDateTime());
    }

    /**
     * @covers Gems\HL7\Segment\EVNSegment::getPlannedDateTimestamp
     * @todo   Implement testGetRecordedDateTimeStamp()
     * /
    public function testGetPlannedDateTimestamp() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gems\HL7\Segment\EVNSegment::getEventReasonCode
     * @todo   Implement testGetEventReasonCode().
     * /
    public function testGetEventReasonCode() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gems\HL7\Segment\EVNSegment::getOperatorId
     * @todo   Implement testGetOperatorId().
     * /
    public function testGetOperatorId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Gems\HL7\Segment\EVNSegment::getEventOccurredDateTimestamp
     */
    public function testGetEventOccurredDateTimestamp() {
        $this->assertEquals('20170103075309', $this->object->getEventOccurredDateTimestamp()->getDateTime());
    }

    /**
     * @covers Gems\HL7\Segment\EVNSegment::getEventFacility
     * @todo   Implement testGetEventFacility().
     * /
    public function testGetEventFacility() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
    // */
}
