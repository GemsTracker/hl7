<?php

namespace Gems\HL7\Extractor;

use Gems\HL7\Unserializer;
use Zalt\Loader\ProjectOverloader;
use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-09 at 13:22:05.
 */
class RespondentExtractorTest extends \PHPUnit_Framework_TestCase
{

    /**
     *
     * @var \Gems\HL7\Node\Message;
     */
    protected $message;

    /**
     * @var \Gems\HL7\Segment\PIDSegment
     */
    protected $pid;

    /**
     * @var RespondentExtractor
     */
    protected $respondentExtractor;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $loader = new ProjectOverloader([
            'Gems\\Clover',
            'Gems',
            'PharmaIntelligence',
        ]);
        $loader->createServiceManager();

        $this->unserializer        = $loader->create('HL7\\Unserializer');
        $this->respondentExtractor = new RespondentExtractor();
    }

    protected function _getMessageFromFile($filename)
    {
        static $map = array(
            'EVN' => 'Gems\HL7\Segment\EVNSegment',
            'MSA' => 'Gems\HL7\Segment\MSASegment',
            'MSH' => 'Gems\HL7\Segment\MSHSegment',
            'PID' => 'Gems\HL7\Segment\PIDSegment',
            'PV1' => 'Gems\HL7\Segment\PV1Segment',
            'SCH' => 'Gems\HL7\Segment\SCHSegment',
        );

        $file    = TEST_DIR . '/resources/' . $filename;
        $testHl7 = file_get_contents($file);

        $this->message = $this->unserializer->loadMessageFromString($testHl7, $map);
        $this->pid     = $this->message->getPidSegment();
    }

    public function testRespondent()
    {
        $this->_getMessageFromFile('orm.txt');

        $expectedResult = array(
            'gr2o_patient_nr'      => '8101892',
            'gr2o_id_organization' => 'HISCOM',
            'gr2o_reception_code'  => 'OK',
            'grs_ssn'              => '134960713',
            'grs_iso_lang'         => 'EN',
            'grs_first_name'       => 'Wendy',
            'grs_surname_prefix'   => 'van',
            'grs_last_name'        => 'Liempd',
            'grs_gender'           => 'F',
            'grs_birthday'         => '1982-07-03',
            'grs_address_1'        => 'Schipholstraat 20',
            'grs_zipcode'          => '3045XC',
            'grs_city'             => 'Rotterdam',
            'grs_iso_country'      => 'EN',
            'grs_phone_1'          => '06-43064759',
        );

        $this->respondentExtractor->setSsnAutority('NLMINBIZA');
        $this->assertEquals(
                $expectedResult, $this->respondentExtractor->extractRow($this->message)
        );
    }

    public function testRespondent2()
    {
        $this->_getMessageFromFile('orm_1.txt');

        $expectedResult = array(
            'gr2o_patient_nr'      => '8101892',
            'gr2o_id_organization' => 'HISCOM',
            'gr2o_reception_code'  => 'OK',
            'grs_ssn'              => '134960713',
            'grs_iso_lang'         => 'EN',
            'grs_first_name'       => 'Wendy',
            'grs_surname_prefix'   => 'van',
            'grs_last_name'        => 'Liempd',
            'grs_gender'           => 'F',
            'grs_birthday'         => '1982-07-03',
            'grs_address_1'        => 'Schipholstraat 20',
            'grs_zipcode'          => '3045XC',
            'grs_city'             => 'Rotterdam',
            'grs_iso_country'      => 'EN',
            'grs_phone_1'          => '06-43064759',
        );

        $this->respondentExtractor->setSsnAutority('NLMINBIZA');
        $this->assertEquals(
                $expectedResult, $this->respondentExtractor->extractRow($this->message)
        );
    }

    public function testRespondentIdFailAuthority()
    {
        $this->_getMessageFromFile('orm.txt');

        // Non existing authority
        $this->assertEquals(null, $this->pid->getPatientCxFor('XYZ'));
    }

}
